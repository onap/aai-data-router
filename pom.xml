<!--
============LICENSE_START=======================================================
org.onap.aai
================================================================================
Copyright © 2017-2018 AT&T Intellectual Property. All rights reserved.
Copyright © 2017-2018 Amdocs
================================================================================
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
============LICENSE_END=========================================================
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>1.5.15.RELEASE</version>
      <relativePath />
   </parent>
   <groupId>org.onap.aai.data-router</groupId>
   <artifactId>data-router</artifactId>
   <version>1.4.0-SNAPSHOT</version>
   <name>aai-data-router</name>

   <properties>
      <java.version>1.8</java.version>
      <camel-spring-boot.version>2.21.1</camel-spring-boot.version>
      <docker.location>${basedir}/target</docker.location>
      <absoluteDistFilesRoot>/appl/${project.artifactId}</absoluteDistFilesRoot>
      <!-- For NO Versioning, REMOVE the /${project.version} from the <distFilesRoot>
         property, below. PLEASE, NOTE: If your ${project.version} is a "-SNAPSHOT"
         version, THIS will be used as your directory structure. If you do NOT want
         this, simply remove the "-SNAPSHOT" from your <version> declaration at the
         top of pom.xml -->
      <distFilesRoot>/appl/${project.artifactId}/${project.version}</distFilesRoot>
      <!-- For SOA Cloud Installation -->
      <installOwnerUser>aaiadmin</installOwnerUser>
      <installOwnerGroup>aaiadmin</installOwnerGroup>
      <ownerManagementGroup>com.att.csid.lab</ownerManagementGroup>

      <!-- Port Selection. A value of 0 will allow for dynamic port selection.
         For local testing, you may choose to hardcode this value to something like
         8080 -->
      <serverPort>0</serverPort>
      <sslport>9502</sslport>

      <testRouteOffer>workstation</testRouteOffer>
      <testEnv>DEV</testEnv>
      <checkstyle.config.location>google_checks.xml</checkstyle.config.location>
      <nexusproxy>https://nexus.onap.org</nexusproxy>
      <!-- Sonar Properties -->
      <sonar.language>java</sonar.language>
      <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
      <sonar.surefire.reportsPath>${project.build.directory}/surefire-reports</sonar.surefire.reportsPath>
      <sonar.jacoco.reportPath>${project.build.directory}/coverage-reports/jacoco.exec</sonar.jacoco.reportPath>
      <sonar.jacoco.reportMissing.force.zero>false</sonar.jacoco.reportMissing.force.zero>
      <sonar.projectVersion>${project.version}</sonar.projectVersion>
      <logback.version>1.2.3</logback.version>
      <version.com.google.guava>16.0.1</version.com.google.guava>
      <shemaUnpackVersion>onap</shemaUnpackVersion>
   </properties>

   <dependencies>
    <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
            <version>${logback.version}</version>
        </dependency>
      <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-spring-boot-starter</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-core</artifactId>
         <version>${camel-spring-boot.version}</version>
      </dependency>
      <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-servlet-starter</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-cxf</artifactId>
         <version>${camel-spring-boot.version}</version>
      </dependency>
      <!-- Spring dependencies -->
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-web</artifactId>
         <exclusions>
           <exclusion>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-tomcat</artifactId>
           </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-actuator</artifactId>
      </dependency>
      <dependency>
         <groupId>javax.ws.rs</groupId>
         <artifactId>javax.ws.rs-api</artifactId>
         <version>2.1</version>
      </dependency>
      <dependency>
         <groupId>org.powermock</groupId>
         <artifactId>powermock-module-junit4</artifactId>
         <version>1.6.2</version>
         <scope>test</scope>
      </dependency>

     <dependency>
       <groupId>org.assertj</groupId>
       <artifactId>assertj-core</artifactId>
       <version>3.10.0</version>
       <scope>test</scope>
     </dependency>
      <dependency>
         <groupId>org.powermock</groupId>
         <artifactId>powermock-api-mockito</artifactId>
         <version>1.6.2</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.powermock</groupId>
         <artifactId>powermock-module-javaagent</artifactId>
         <version>1.6.2</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.powermock</groupId>
         <artifactId>powermock-module-junit4-rule-agent</artifactId>
         <version>1.6.2</version>
         <scope>test</scope>
      </dependency>
      <dependency>
		  <groupId>org.dom4j</groupId>
		  <artifactId>dom4j</artifactId>
		  <scope>provided</scope>
		  <version>2.1.1</version>
	  </dependency>

      <dependency>
         <groupId>com.att.aft</groupId>
         <artifactId>dme2</artifactId>
         <version>3.1.200-oss</version>
         <scope>provided</scope>
      </dependency>
      <!--<dependency>-->
         <!--<groupId>org.onap.aai.aai-common</groupId>-->
         <!--<artifactId>aai-schema</artifactId>-->
         <!--<version>1.3.0-SNAPSHOT</version>-->
      <!--</dependency>-->
      <!--<dependency>-->
        <!--<groupId>org.onap.aai.aai-common</groupId>-->
         <!--<artifactId>aai-schema-ingest</artifactId>-->
         <!--<version>1.2.2</version>-->
         <!--<exclusions>-->
             <!--<exclusion>-->
                 <!--<groupId>com.google.guava</groupId>-->
                 <!--<artifactId>guava</artifactId>-->
             <!--</exclusion>-->
         <!--</exclusions>-->
      <!--</dependency>-->
      <dependency>
         <groupId>org.onap.aai.router-core</groupId>
         <artifactId>router-core</artifactId>
         <version>1.4.0-SNAPSHOT</version>
      </dependency>

      <dependency>
         <groupId>org.onap.aai.aai-common</groupId>
         <artifactId>aai-schema-ingest</artifactId>
         <version>1.3.0</version>
      </dependency>
      
      <dependency>
         <groupId>org.json</groupId>
         <artifactId>json</artifactId>
      </dependency>

      <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
         <version>2.6.2</version>
      </dependency>

      <dependency>
         <groupId>org.eclipse.persistence</groupId>
         <artifactId>eclipselink</artifactId>
         <version>2.6.2</version>
      </dependency>

      <dependency>
         <groupId>org.onap.aai.logging-service</groupId>
         <artifactId>common-logging</artifactId>
         <version>1.2.2</version>
      </dependency>

      <dependency>
         <groupId>org.onap.aai.logging-service</groupId>
         <artifactId>logging-api</artifactId>
         <version>1.1.0</version>
      </dependency>

      <dependency>
         <groupId>org.onap.aai</groupId>
         <artifactId>rest-client</artifactId>
         <version>1.1.0</version>
      </dependency>

    <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${version.com.google.guava}</version>
      </dependency>

   </dependencies>

   <build>
      <finalName>${project.artifactId}</finalName>
      <plugins>
        <!-- jacoco-maven-plugin provides the basic report creation during unit testing, such as code-coverage, sonar, etc. -->
         <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
               <!-- Prepares the property pointing to the JaCoCo runtime agent which
                    is passed as VM argument when Maven the Surefire plugin is executed. -->
               <execution>
                  <id>pre-unit-test</id>
                  <goals>
                     <goal>prepare-agent</goal>
                  </goals>
                  <configuration>
                     <!-- Sets the path to the file which contains the execution data. -->
                     <destFile>${sonar.jacoco.reportPath}</destFile>
                     <propertyName>surefireArgLine</propertyName>
                  </configuration>
               </execution>
               <!-- Ensures that the code coverage report for unit tests is created
                    after unit tests have been run. -->
               <execution>
                  <id>post-unit-test</id>
                  <phase>test</phase>
                  <goals>
                     <goal>report</goal>
                  </goals>
                  <configuration>
                     <!-- Sets the path to the file which contains the execution data. -->
                     <dataFile>${sonar.jacoco.reportPath}</dataFile>
                     <!-- Sets the output directory for the code coverage report. -->
                     <outputDirectory>${jacoco.path}</outputDirectory>
                  </configuration>
               </execution>
               <!-- Prepares the property pointing to the JaCoCo runtime agent which
                    is passed as VM argument when Maven the Failsafe plugin is executed. -->
               <execution>
                  <id>pre-integration-test</id>
                  <phase>pre-integration-test</phase>
                  <goals>
                     <goal>prepare-agent</goal>
                  </goals>
                  <configuration>
                     <!-- Sets the path to the file which contains the execution data. -->
                     <destFile>${sonar.jacoco.itReportPath}</destFile>
                     <!-- Sets the name of the property containing the settings for JaCoCo
                          runtime agent. -->
                     <propertyName>failsafeArgLine</propertyName>
                  </configuration>
               </execution>
               <!-- Ensures that the code coverage report for integration tests after
                    integration tests have been run. -->
               <execution>
                  <id>post-integration-test</id>
                  <phase>post-integration-test</phase>
                  <goals>
                     <goal>report</goal>
                  </goals>
                  <configuration>
                     <!-- Sets the path to the file which contains the execution data. -->
                     <dataFile>${sonar.jacoco.itReportPath}/</dataFile>
                     <!-- Sets the output directory for the code coverage report. -->
                     <outputDirectory>${jacoco.itPath}</outputDirectory>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <!-- Checkstyle plugin - used to report on compliance with -->
         <!-- the Google style guide. -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <version>3.3</version>
            <configuration>
               <reportPlugins>
                  <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-checkstyle-plugin</artifactId>
                     <version>2.17</version>
                     <reportSets>
                        <reportSet>
                           <reports>
                              <report>checkstyle</report>
                           </reports>
                        </reportSet>
                     </reportSets>
                  </plugin>
               </reportPlugins>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
         </plugin>
           <plugin>
		    <artifactId>maven-surefire-plugin</artifactId>
		    <version>2.21.0</version>
		    <configuration>
		    	<systemPropertyVariables>
		    		<APP_HOME>${project.basedir}</APP_HOME>
				    <CONFIG_HOME>${project.basedir}/src/test/resources/config</CONFIG_HOME>
				    <SERVICE_BEANS>${project.basedir}/src/test/resources/spring-beans</SERVICE_BEANS>
				    <testShemaUnpackVersion>${shemaUnpackVersion}</testShemaUnpackVersion>
		    	</systemPropertyVariables>
		    </configuration>
		</plugin>  
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.7</version>
            <executions>
               <execution>
                  <id>copy-docker-file</id>
                  <phase>package</phase>
                  <goals>
                     <goal>copy-resources</goal>
                  </goals>
                  <configuration>
                     <outputDirectory>target</outputDirectory>
                     <overwrite>true</overwrite>
                     <resources>
                        <resource>
                           <directory>${basedir}/src/main/docker</directory>
                           <filtering>true</filtering>
                           <includes>
                              <include>**/*</include>
                           </includes>
                        </resource>
                        <resource>
                           <directory>${basedir}</directory>
                           <filtering>true</filtering>
                           <includes>
                              <include>bundleconfig-local/**</include>
                           </includes>
                        </resource>
                        <resource>
                           <directory>${basedir}/src/main/bin/</directory>
                           <filtering>true</filtering>
                           <includes>
                              <include>**/*</include>
                           </includes>
                        </resource>
                        <resource>
                           <directory>${basedir}/config</directory>
                           <filtering>true</filtering>
                           <includes>
                              <include>schema/**</include>
                           </includes>
                        </resource>
                     </resources>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.onap.aai.aai-common</groupId>
                      <artifactId>aai-schema</artifactId>
                      <version>1.3.0</version>
                      <type>jar</type>
                      <includes>/${shemaUnpackVersion}/oxm/</includes>
                      <outputDirectory>${project.build.directory}/oxm</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.4.11</version>
            <configuration>
               <verbose>true</verbose>
               <serverId>docker-hub</serverId>
               <imageName>${docker.push.registry}/onap/${project.artifactId}</imageName>
               <dockerDirectory>${docker.location}</dockerDirectory>
               <imageTags>
                  <imageTag>latest</imageTag>
               </imageTags>
               <forceTags>true</forceTags>
            </configuration>
         </plugin>
         <!-- license plugin -->
         <!-- Uncomment this to add a license header to every source file
  <plugin>
    <groupId>com.mycila</groupId>
    <artifactId>license-maven-plugin</artifactId>
    <version>3.0</version>
    <configuration>
      <header>License.txt</header>
      <includes>
        <include>src/main/java/**</include>
        <include>src/test/java/**</include>
      </includes>
    </configuration>
    <executions>
      <execution>
        <goals>
          <goal>format</goal>
        </goals>
        <phase>process-sources</phase>
      </execution>
    </executions>
  </plugin> -->
         <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>1.6.7</version>
            <extensions>true</extensions>
            <configuration>
               <nexusUrl>${nexusproxy}</nexusUrl>
               <stagingProfileId>176c31dfe190a</stagingProfileId>
               <serverId>ecomp-staging</serverId>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <configuration>
               <skip>true</skip>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>3.2</version>
         </plugin>
         <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.7.7.201606060606</version>
            <configuration>
               <dumpOnExit>true</dumpOnExit>
            </configuration>
            <executions>
               <execution>
                  <id>jacoco-initialize-unit-tests</id>
                  <goals>
                     <goal>prepare-agent</goal>
                  </goals>
                  <configuration>
                     <destFile>${project.build.directory}/coverage-reports/jacoco.exec
                     </destFile>
                  </configuration>
               </execution>
            </executions>
         </plugin>

      </plugins>
   </build>


   <dependencyManagement>
      <dependencies>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot-dependencies</artifactId>
            <version>${camel-spring-boot.version}</version>
            <type>pom</type>
            <scope>import</scope>
         </dependency>
         <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.5</version>
         </dependency>
         <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4.1</version>
         </dependency>
         <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20131018</version>
         </dependency>
      </dependencies>
   </dependencyManagement>
   <distributionManagement>
      <repository>
         <id>ecomp-releases</id>
         <name>ECOMP Release Repository</name>
         <url>${nexusproxy}/content/repositories/releases/</url>
      </repository>
      <snapshotRepository>
         <id>ecomp-snapshots</id>
         <name>ECOMP Snapshot Repository</name>
         <url>${nexusproxy}/content/repositories/snapshots/</url>
      </snapshotRepository>
   </distributionManagement>
</project>
